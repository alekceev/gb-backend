openapi: 3.0.1
info:
  title: Shop
  description: Api for shop
  version: 1.0.0
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64
        image_link:
          type: string
    OrderItems:
      allOf:
        - $ref: "#/components/schemas/Item"
        - type: object
          properties:
            count:
              type: integer
              format: int64
    Order:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItems"
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
          - canceled
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    itemstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://itemstore.swagger.io/oauth/dialog
          scopes:
            write:items: modify items in your account
            read:items: read your items
    api_key:
      type: apiKey
      name: api_key
      in: header
tags:
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
- name: item
  description: Everything about Item
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: order
  description: Access to shop orders
paths:
  /user/login:
    post:
      tags:
      - user
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    post:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful logout
          content: {}
  /items:
    post:
      tags:
      - item
      summary: "Add a new item to the store"
      operationId: "CreateItem"
      requestBody:
        description: "Item object that needs to be added to the store"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        "405":
          description: "Invalid input"
    get:
      tags:
      - item
      summary: Lists Items with filters
      operationId: ListItems
      parameters:
      - name: price_min
        in: query
        description: Lower price limit
        required: false
        schema:
          type: integer
          format: int64
      - name: price_max
        in: query
        description: Upper price limit
        required: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        400:
          description: Invalid price range
          content: {}
  /items/upload_image:
    post:
      tags:
      - item
      summary: "uploads an image"
      operationId: "uploadFile"
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                  description: "Additional data to pass to server"
                file:
                  type: string
                  description: "file to upload"
                  format: binary
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - itemstore_auth:
        - write:items
        - read:items
  /items/{itemId}:
    get:
      tags:
      - item
      summary: Find item by ID
      operationId: GetItem
      parameters:
      - name: itemId
        in: path
        description: ID of item to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Invalid ID supplied
          content: {}
    put:
      tags:
      - item
      summary: Updates a item in the store with form data
      operationId: UpdateItem
      parameters:
      - name: itemId
        in: path
        description: ID of item that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the item
                status:
                  type: string
                  description: Updated status of the item
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - itemstore_auth:
        - write:items
        - read:items
    delete:
      tags:
      - item
      summary: Deletes a item
      operationId: DeleteItem
      parameters:
      - name: itemId
        in: path
        description: Item id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Item not found
          content: {}
      security:
      - itemstore_auth:
        - write:items
        - read:items
  /order:
    post:
      tags:
      - order
      summary: Create order
      operationId: CreateOrder
      requestBody:
        description: Create new order
        content:
          aplication/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        200:
          description: Order created successful
          content:
            aplication/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
        400:
          description: Error order created
      security:
        - api_key: []
  /order/{orderId}:
    get:
      tags:
      - order
      summary: Get order with list of items
      operationId: GetOrder
      parameters:
        - name: orderId
          in: path
          description: order ID to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Successful operation
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/Order"
        403:
          description: Forbidden
        404:
          description: Internal Server Error
          content: {}
      security:
        - api_key: []
    patch:
      tags:
      - order
      summary: Update order
      operationId: UpdateOrder
      parameters:
        - name: orderId
          in: path
          description: order ID to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Updated order object
        content:
          aplication/json:
            schema:
              properties:
                status:
                  type: string
                  description: Updated status of the order
        required: true
      responses:
        200:
          description: Successful Operation
        400:
          description: Invalid Input
        403:
          description: Forbidden
        404:
          description: Order not found
      security:
        - api_key: []
